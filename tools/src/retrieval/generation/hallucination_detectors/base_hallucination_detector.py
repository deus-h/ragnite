"""
Base Hallucination Detector

This module defines the BaseHallucinationDetector abstract class that all hallucination
detectors must implement. Hallucination detectors identify potential false information
in language model outputs by comparing with sources or analyzing for inconsistencies.
"""

from abc import ABC, abstractmethod
from typing import Any, Dict, List, Optional, Union, TypeVar, Generic

T = TypeVar('T')

class BaseHallucinationDetector(ABC):
    """
    Abstract base class for hallucination detectors.
    
    Hallucination detectors identify potential false or unsupported information in
    language model outputs. They can compare generated text with source documents,
    analyze for internal contradictions, check factual consistency, or identify
    uncertain statements.
    
    Attributes:
        config (Dict[str, Any]): Configuration options for the detector.
    """
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        Initialize the hallucination detector.
        
        Args:
            config: Optional configuration dictionary for the detector.
        """
        self.config = config or {}
    
    @abstractmethod
    def detect(self, 
              generated_text: str, 
              source_documents: Optional[List[Dict[str, Any]]] = None, 
              **kwargs) -> Dict[str, Any]:
        """
        Detect hallucinations in the generated text.
        
        Args:
            generated_text: The text generated by the language model.
            source_documents: Optional list of source documents that were used for retrieval.
                Each document should be a dictionary with at least 'content' and 'metadata' fields.
            **kwargs: Additional arguments that may be needed for specific detectors.
            
        Returns:
            A dictionary containing detection results, which may include:
                - score: A hallucination score (lower is better)
                - detected_hallucinations: List of potentially hallucinated statements
                - explanation: Explanation of why each statement is considered a hallucination
                - source_verification: Results of comparing with source documents
                - confidence: Confidence in the detection results
        """
        pass
    
    @abstractmethod
    def get_detection_type(self) -> str:
        """
        Get the type of hallucination detection performed.
        
        Returns:
            A string describing the type of detection (e.g., "factual_consistency",
            "source_verification", "contradiction", "uncertainty").
        """
        pass
    
    def get_config(self) -> Dict[str, Any]:
        """
        Get the current configuration of the detector.
        
        Returns:
            A dictionary containing the current configuration.
        """
        return self.config.copy()
    
    def set_config(self, config: Dict[str, Any]) -> None:
        """
        Update the configuration of the detector.
        
        Args:
            config: A dictionary containing configuration options to update.
        """
        self.config.update(config)


class HallucinationDetectionResult:
    """
    Class for storing and analyzing hallucination detection results.
    
    This class provides a standardized format for hallucination detection results
    and methods for analyzing and combining results from multiple detectors.
    
    Attributes:
        score (float): Hallucination score (lower is better, typically 0-1)
        detected_hallucinations (List[Dict[str, Any]]): List of detected hallucinations
        explanation (str): Explanation of the detection results
        confidence (float): Confidence in the detection results (0-1)
        detection_type (str): Type of hallucination detection performed
    """
    
    def __init__(self, 
                score: float,
                detected_hallucinations: List[Dict[str, Any]],
                explanation: str,
                confidence: float,
                detection_type: str):
        """
        Initialize a hallucination detection result.
        
        Args:
            score: Hallucination score (lower is better, typically 0-1)
            detected_hallucinations: List of detected hallucinations, each with:
                - text: The hallucinated text span
                - span: (start, end) character indices in the original text
                - reason: Reason why it's considered a hallucination
                - severity: Severity level (e.g., "low", "medium", "high")
            explanation: Human-readable explanation of the detection results
            confidence: Confidence in the detection results (0-1)
            detection_type: Type of hallucination detection performed
        """
        self.score = score
        self.detected_hallucinations = detected_hallucinations
        self.explanation = explanation
        self.confidence = confidence
        self.detection_type = detection_type
    
    @classmethod
    def from_dict(cls, result_dict: Dict[str, Any]) -> 'HallucinationDetectionResult':
        """
        Create a HallucinationDetectionResult from a dictionary.
        
        Args:
            result_dict: Dictionary containing detection results
            
        Returns:
            A HallucinationDetectionResult object
        """
        return cls(
            score=result_dict.get("score", 1.0),
            detected_hallucinations=result_dict.get("detected_hallucinations", []),
            explanation=result_dict.get("explanation", ""),
            confidence=result_dict.get("confidence", 0.0),
            detection_type=result_dict.get("detection_type", "unknown")
        )
    
    def to_dict(self) -> Dict[str, Any]:
        """
        Convert the detection result to a dictionary.
        
        Returns:
            A dictionary representation of the detection result
        """
        return {
            "score": self.score,
            "detected_hallucinations": self.detected_hallucinations,
            "explanation": self.explanation,
            "confidence": self.confidence,
            "detection_type": self.detection_type
        }
    
    def has_hallucinations(self) -> bool:
        """
        Check if any hallucinations were detected.
        
        Returns:
            True if any hallucinations were detected, False otherwise
        """
        return len(self.detected_hallucinations) > 0
    
    def get_hallucination_spans(self) -> List[Dict[str, Any]]:
        """
        Get the text spans of detected hallucinations.
        
        Returns:
            List of dictionaries with text and span information
        """
        return [
            {"text": h["text"], "span": h["span"]} 
            for h in self.detected_hallucinations
        ]
    
    def get_severity_counts(self) -> Dict[str, int]:
        """
        Count hallucinations by severity level.
        
        Returns:
            Dictionary mapping severity levels to counts
        """
        severity_counts = {}
        for h in self.detected_hallucinations:
            severity = h.get("severity", "unknown")
            severity_counts[severity] = severity_counts.get(severity, 0) + 1
        return severity_counts
    
    def __str__(self) -> str:
        """
        Get a string representation of the detection result.
        
        Returns:
            A human-readable string summarizing the detection result
        """
        num_hallucinations = len(self.detected_hallucinations)
        return (f"Hallucination Detection ({self.detection_type}) - "
                f"Score: {self.score:.2f}, "
                f"Confidence: {self.confidence:.2f}, "
                f"Detected: {num_hallucinations} hallucinations\n"
                f"Explanation: {self.explanation}")
    
    @staticmethod
    def combine_results(results: List['HallucinationDetectionResult']) -> 'HallucinationDetectionResult':
        """
        Combine multiple detection results into a single result.
        
        Args:
            results: List of HallucinationDetectionResult objects to combine
            
        Returns:
            A combined HallucinationDetectionResult
        """
        if not results:
            return HallucinationDetectionResult(1.0, [], "", 0.0, "combined")
        
        # Combine scores using weighted average based on confidence
        total_confidence = sum(r.confidence for r in results)
        if total_confidence == 0:
            # If no confidence, use simple average
            combined_score = sum(r.score for r in results) / len(results)
            combined_confidence = 0.0
        else:
            # Weighted average based on confidence
            combined_score = sum(r.score * r.confidence for r in results) / total_confidence
            combined_confidence = total_confidence / len(results)
        
        # Combine detected hallucinations, avoiding duplicates by text span
        all_hallucinations = []
        seen_spans = set()
        for result in results:
            for hall in result.detected_hallucinations:
                span_key = f"{hall['span'][0]}:{hall['span'][1]}"
                if span_key not in seen_spans:
                    seen_spans.add(span_key)
                    all_hallucinations.append(hall)
        
        # Combine explanations
        combined_explanation = "\n".join(
            f"{r.detection_type}: {r.explanation}" for r in results
        )
        
        # Combined detection type
        detection_types = ", ".join(r.detection_type for r in results)
        
        return HallucinationDetectionResult(
            score=combined_score,
            detected_hallucinations=all_hallucinations,
            explanation=combined_explanation,
            confidence=combined_confidence,
            detection_type=f"combined({detection_types})"
        ) 